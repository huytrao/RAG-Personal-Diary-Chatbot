#!/usr/bin/env python3
"""
Test script for Diary RAG System
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.Retrivel_And_Generation.Retrieval_And_Generator import DiaryRAGSystem, create_rag_system

def test_rag_system():
    """Test the RAG system functionality."""
    
    print("üß™ TESTING DIARY RAG SYSTEM")
    print("=" * 50)
    
    try:
        # Initialize RAG system
        print("\n1Ô∏è‚É£ Initializing RAG System...")
        rag = create_rag_system(
            vector_db_path="./src/Indexingstep/diary_vector_db_enhanced"
        )
        
        # Health check
        print("\n2Ô∏è‚É£ Health Check...")
        status = rag.health_check()
        print("System Status:")
        for key, value in status.items():
            print(f"  ‚úÖ {key}: {value}")
        
        if not status.get("vector_store_healthy"):
            print("\n‚ö†Ô∏è Vector store not healthy. Please run indexing first.")
            return
        
        # Test basic queries
        print("\n3Ô∏è‚É£ Testing Basic Queries...")
        test_queries = [
            "T√¥i c·∫£m th·∫•y nh∆∞ th·∫ø n√†o h√¥m nay?",
            "C√≥ g√¨ ƒë·∫∑c bi·ªát trong nh·∫≠t k√Ω c·ªßa t√¥i kh√¥ng?",
            "T√¢m tr·∫°ng c·ªßa t√¥i th·∫ø n√†o?",
            "T√¥i ƒë√£ l√†m g√¨ trong th·ªùi gian g·∫ßn ƒë√¢y?"
        ]
        
        for i, query in enumerate(test_queries, 1):
            print(f"\n--- Test Query {i} ---")
            print(f"‚ùì Query: {query}")
            
            try:
                response = rag.generate_response(query)
                print(f"ü§ñ Response: {response}")
                print("‚úÖ Success")
            except Exception as e:
                print(f"‚ùå Error: {str(e)}")
        
        # Test retrieval only
        print("\n4Ô∏è‚É£ Testing Document Retrieval...")
        try:
            docs = rag.retrieve_relevant_entries("c·∫£m x√∫c t√¢m tr·∫°ng", k=3)
            print(f"üìÑ Retrieved {len(docs)} documents")
            
            for i, doc in enumerate(docs, 1):
                print(f"\nDocument {i}:")
                print(f"  Content: {doc.page_content[:100]}...")
                print(f"  Metadata: {doc.metadata}")
        except Exception as e:
            print(f"‚ùå Retrieval error: {str(e)}")
        
        # Test tag-based search
        print("\n5Ô∏è‚É£ Testing Tag-based Search...")
        try:
            tag_docs = rag.search_by_tags(["work", "family", "health"], k=3)
            print(f"üè∑Ô∏è Found {len(tag_docs)} documents with specified tags")
            
            for i, doc in enumerate(tag_docs, 1):
                tags = doc.metadata.get('tags_list', 'No tags')
                print(f"  Doc {i}: Tags = {tags}")
        except Exception as e:
            print(f"‚ùå Tag search error: {str(e)}")
        
        # Test summary generation
        print("\n6Ô∏è‚É£ Testing Summary Generation...")
        try:
            summary = rag.generate_summary()
            print(f"üìä Summary: {summary}")
        except Exception as e:
            print(f"‚ùå Summary error: {str(e)}")
        
        # Test conversation context
        print("\n7Ô∏è‚É£ Testing Conversation Context...")
        try:
            chat_history = [
                {"role": "user", "content": "T√¥i c·∫£m th·∫•y bu·ªìn h√¥m nay"},
                {"role": "assistant", "content": "T√¥i hi·ªÉu b·∫°n ƒëang c·∫£m th·∫•y bu·ªìn. C√≥ ƒëi·ªÅu g√¨ ƒë·∫∑c bi·ªát khi·∫øn b·∫°n c·∫£m th·∫•y nh∆∞ v·∫≠y?"},
                {"role": "user", "content": "C√¥ng vi·ªác kh√≥ khƒÉn qu√°"}
            ]
            
            contextual_response = rag.generate_contextual_response(
                "L√†m sao ƒë·ªÉ t√¥i c·∫£m th·∫•y t·ªët h∆°n?",
                chat_history
            )
            print(f"üí¨ Contextual Response: {contextual_response}")
        except Exception as e:
            print(f"‚ùå Contextual response error: {str(e)}")
        
        print("\n‚úÖ RAG System Testing Complete!")
        
    except Exception as e:
        print(f"\n‚ùå Test failed with error: {str(e)}")
        import traceback
        traceback.print_exc()

def test_fallback_response():
    """Test fallback response when vector DB is not available."""
    
    print("\nüß™ TESTING FALLBACK RESPONSE")
    print("=" * 50)
    
    try:
        # Create RAG system with non-existent DB path
        rag = DiaryRAGSystem(
            vector_db_path="./non_existent_path",
            google_api_key=os.getenv("GOOGLE_API_KEY")
        )
        
        # Test fallback response
        response = rag.generate_response("T√¥i c·∫£m th·∫•y bu·ªìn", use_fallback=True)
        print(f"ü§ñ Fallback Response: {response}")
        
        print("‚úÖ Fallback response works!")
        
    except Exception as e:
        print(f"‚ùå Fallback test error: {str(e)}")

if __name__ == "__main__":
    # Check for Google API key
    if not os.getenv("GOOGLE_API_KEY"):
        print("‚ö†Ô∏è Warning: GOOGLE_API_KEY environment variable not set")
        print("Some tests may fail without the API key")
    
    # Run tests
    test_rag_system()
    test_fallback_response()
    
    print("\nüéâ All tests completed!")
    print("\nUsage in interface.py:")
    print("```python")
    print("from Retrivel_And_Generation.Retrieval_And_Generator import create_rag_system")
    print("")
    print("# Initialize RAG system")
    print("rag = create_rag_system()")
    print("")
    print("# Generate response")
    print("response = rag.generate_response(user_query)")
    print("```")
